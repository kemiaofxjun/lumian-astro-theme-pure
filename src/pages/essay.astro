---
// src/pages/moment.astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import config from '@/site-config';
import type { TalkItem } from '@/types';

// 常量定义
const API_CONFIG = {
  MEMO_API: 'https://moment.050815.xyz/api/memo/list',
  PAGE_SIZE: 30
};

// 格式化时间函数
function formatTime(time: string) {
  const d = new Date(time);
  const year = d.getFullYear();
  const month = (d.getMonth() + 1).toString().padStart(2, '0');
  const day = d.getDate().toString().padStart(2, '0');
  const hours = d.getHours().toString().padStart(2, '0');
  const minutes = d.getMinutes().toString().padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}`;
}

// 格式化内容函数
function formatContent(item: any) {
  let content = item.content;
  const imgs = item.imgs ? item.imgs.split(',') : [];
  const ext = JSON.parse(item.ext || '{}');

  content = content
    .replace(/$$(.*?)$$$$(.*?)$$/g, '<a class="talk_content_link" target="_blank" rel="nofollow" href="$2">@$1</a>')
    .replace(/- $$ $$/g, '⚪')
    .replace(/- $$x$$/g, '⚫')
    .replace(/\n/g, '<br>');

  content = `<div class="talk_content_text">${content}</div>`;

  return {
    text: content,
    images: imgs.map((img: string) => img.startsWith('http') ? img : `https:${img}`),
    video: ext.video?.type === 'bilibili'
      ? {
          type: 'bilibili',
          url: ext.video.value,
          id: ext.video.value.match(/BV\w+/)?.[0],
        }
      : ext.video?.type === 'youtube'
        ? {
            type: 'youtube',
            url: ext.video.value,
            id: ext.video.value.match(/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w-]{11})/)?.[1],
          }
        : ext.video?.type === 'online'
          ? {
              type: 'online',
              url: ext.video.value,
            }
          : null,
    doubanMovie: ext.doubanMovie?.id
      ? {
          url: ext.doubanMovie.url,
          title: ext.doubanMovie.title,
          image: ext.doubanMovie.image,
          director: ext.doubanMovie.director,
          rating: ext.doubanMovie.rating,
          runtime: ext.doubanMovie.runtime,
        }
      : null,
    doubanBook: ext.doubanBook?.id
      ? {
          url: ext.doubanBook.url,
          title: ext.doubanBook.title,
          image: ext.doubanBook.image,
          author: ext.doubanBook.author,
          pubDate: ext.doubanBook.pubDate,
          rating: ext.doubanBook.rating,
        }
      : null,
    externalLink: item.externalUrl
      ? {
          url: item.externalUrl,
          title: item.externalTitle,
          favicon: item.externalFavicon,
        }
      : null,
  };
}

// 获取数据
let talks: TalkItem[] = [];
let loading = true;
let error = false;

try {
  const response = await fetch(API_CONFIG.MEMO_API, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ size: API_CONFIG.PAGE_SIZE }),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  const data = await response.json();

  if (data.code === 0 && data.data?.list) {
    talks = data.data.list.map((item: any) => ({
      content: formatContent(item),
      user: {
        username: item.user.username,
        nickname: item.user.nickname,
        avatarUrl: item.user.avatarUrl,
      },
      date: formatTime(item.createdAt),
      location: item.location || '',
      tags: item.tags
        ? (typeof item.tags === 'string'
            ? item.tags.split(',').filter((tag: string) => tag.trim())
            : item.tags)
        : ['无标签'],
    }));
  } else {
    throw new Error('Failed to fetch talks');
  }
} catch (err) {
  console.error('Error fetching talks:', err);
  error = true;
} finally {
  loading = false;
}
---

<BaseLayout
  meta={{
    title: "瞬间",
    description: `${config.title}的碎碎念页面`,
    ogImage: undefined,
    articleDate: undefined
  }}
>
  <div class="page-essay">
    <div class="talk-container">
      {loading ? (
        <div class="loading-container">
          <div class="loading-spinner"></div>
          <p>加载中...</p>
        </div>
      ) : error ? (
        <div class="error-container">
          <p>加载失败，请刷新页面重试</p>
        </div>
      ) : (
        <div class="talks-list">
          {talks.map((item, index) => (
            <div
              class="talk-item"
              style={`--delay: ${index * 0.1}s`}
            >
              <div class="talk-meta">
                <img
                  class="avatar"
                  src={item.user.avatarUrl}
                  alt={item.user.nickname}
                  width="40"
                  height="40"
                  loading="lazy"
                />
                <div class="info">
                  <div class="talk-nick">
                    {item.user.nickname}
                  </div>
                  <div class="talk-date">{item.date}</div>
                </div>
              </div>
              <div class="talk-content">
                <div set:html={item.content.text} class="talk_content_text"></div>

                {item.content.images.length > 0 && (
                  <div class="zone_imgbox">
                    {item.content.images.map((img) => (
                      <figure class="img-item">
                        <img
                          src={img}
                          class="talk-img"
                          loading="lazy"
                          alt="动态图片"
                          width="300"
                          height="300"
                        />
                      </figure>
                    ))}
                  </div>
                )}

                {item.content.video && (
                  <div class="video-container">
                    {item.content.video.type === "bilibili" && (
                      <iframe
                        src={`//player.bilibili.com/player.html?bvid=${item.content.video.id}&autoplay=0`}
                        scrolling="no"
                        frameborder="no"
                        allowfullscreen
                      ></iframe>
                    )}
                    {item.content.video.type === "youtube" && (
                      <iframe
                        src={`https://www.youtube.com/embed/${item.content.video.id}`}
                        frameborder="0"
                        allowfullscreen
                      ></iframe>
                    )}
                    {item.content.video.type === "online" && (
                      <video
                        src={item.content.video.url}
                        controls
                        class="online-video"
                      ></video>
                    )}
                  </div>
                )}

                {item.content.doubanMovie && (
                  <a
                    class="douban-card gradient-card"
                    href={item.content.doubanMovie.url}
                    target="_blank"
                  >
                    <div
                      class="douban-card-bgimg"
                      style={`background-image: url('${item.content.doubanMovie.image}')`}
                    ></div>
                    <div class="douban-card-left">
                      <div
                        class="douban-card-img"
                        style={`background-image: url('${item.content.doubanMovie.image}')`}
                      ></div>
                    </div>
                    <div class="douban-card-right">
                      <div class="douban-card-item">
                        <span>电影名: </span>
                        <strong>{item.content.doubanMovie.title}</strong>
                      </div>
                      <div class="douban-card-item">
                        <span>导演: </span>
                        {item.content.doubanMovie.director}
                      </div>
                      <div class="douban-card-item">
                        <span>评分: </span>
                        {item.content.doubanMovie.rating}
                      </div>
                      <div class="douban-card-item">
                        <span>时长: </span>
                        {item.content.doubanMovie.runtime}
                      </div>
                    </div>
                  </a>
                )}

                {item.content.doubanBook && (
                  <a
                    class="douban-card gradient-card"
                    href={item.content.doubanBook.url}
                    target="_blank"
                  >
                    <div
                      class="douban-card-bgimg"
                      style={`background-image: url('${item.content.doubanBook.image}')`}
                    ></div>
                    <div class="douban-card-left">
                      <div
                        class="douban-card-img"
                        style={`background-image: url('${item.content.doubanBook.image}')`}
                      ></div>
                    </div>
                    <div class="douban-card-right">
                      <div class="douban-card-item">
                        <span>书名: </span>
                        <strong>{item.content.doubanBook.title}</strong>
                      </div>
                      <div class="douban-card-item">
                        <span>作者: </span>
                        {item.content.doubanBook.author}
                      </div>
                      <div class="douban-card-item">
                        <span>出版年份: </span>
                        {item.content.doubanBook.pubDate}
                      </div>
                      <div class="douban-card-item">
                        <span>评分: </span>
                        {item.content.doubanBook.rating}
                      </div>
                    </div>
                  </a>
                )}

                {item.content.externalLink && (
                  <div class="external-link gradient-card">
                    <a href={item.content.externalLink.url} target="_blank" rel="nofollow">
                      <div class="link-left">
                        <img 
                          src={item.content.externalLink.favicon} 
                          alt={item.content.externalLink.title}
                          width="24"
                          height="24"
                        />
                      </div>
                      <div class="link-right">
                        <div class="link-title">
                          {item.content.externalLink.title}
                        </div>
                      </div>
                    </a>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  </div>
</BaseLayout>

<style>
.page-essay {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.talk-container {
  margin-top: 2rem;
}

.loading-container,
.error-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  text-align: center;
}

.loading-spinner {
  border: 3px solid rgba(0, 0, 0, 0.1);
  border-top: 3px solid #3498db;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.talks-list {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.talk-item {
  opacity: 0;
  animation: fadeIn 0.5s forwards;
  animation-delay: var(--delay);
  background: var(--card-bg);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  transition: transform 0.3s ease;
}

.talk-item:hover {
  transform: translateY(-5px);
}

@keyframes fadeIn {
  to { opacity: 1; }
}

.talk-meta {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 1rem;
}

.talk-meta .avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

.talk-meta .info {
  display: flex;
  flex-direction: column;
}

.talk-nick {
  font-weight: 600;
  font-size: 1.1rem;
}

.talk-date {
  color: var(--secondary-text);
  font-size: 0.9rem;
}

.talk-content {
  line-height: 1.6;
}

.talk_content_text {
  margin-bottom: 1rem;
}

.talk_content_text a {
  color: var(--link-color);
  text-decoration: none;
}

.talk_content_text a:hover {
  text-decoration: underline;
}

.zone_imgbox {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 8px;
  margin: 1rem 0;
}

.talk-img {
  width: 100%;
  border-radius: 8px;
  aspect-ratio: 1/1;
  object-fit: cover;
}

.video-container {
  position: relative;
  padding-top: 56.25%;
  margin: 1rem 0;
}

.video-container iframe,
.video-container video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 8px;
}

.douban-card {
  display: block;
  position: relative;
  overflow: hidden;
  border-radius: 12px;
  margin: 1rem 0;
  color: inherit;
  text-decoration: none;
  height: 150px;
}

.douban-card-bgimg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: cover;
  background-position: center;
  filter: blur(6px) brightness(0.7);
  z-index: 1;
}

.douban-card-left {
  position: absolute;
  left: 20px;
  top: 50%;
  transform: translateY(-50%);
  width: 80px;
  height: 110px;
  z-index: 2;
}

.douban-card-img {
  width: 100%;
  height: 100%;
  background-size: cover;
  background-position: center;
  border-radius: 4px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.douban-card-right {
  position: absolute;
  left: 120px;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  width: calc(100% - 150px);
}

.douban-card-item {
  margin-bottom: 6px;
  font-size: 0.9rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.douban-card-item strong {
  font-weight: 600;
}

.external-link {
  display: block;
  border-radius: 12px;
  padding: 12px;
  background: var(--card-bg);
  margin: 1rem 0;
}

.external-link a {
  display: flex;
  align-items: center;
  gap: 12px;
  text-decoration: none;
  color: inherit;
}

.link-left img {
  width: 24px;
  height: 24px;
}

.link-title {
  font-weight: 500;
}

@media (max-width: 768px) {
  .zone_imgbox {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>